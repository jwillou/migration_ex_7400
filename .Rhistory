install.packages("shiny")
library(library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
library(library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
library(shiny)
citation('shiny')
data = read.table("~/Desktop/NMOUNDS.csv", header=T, sep=",")
View(data)
head(data)
ncol(data)
plot(-100,-100, xlim=c(1980,2020), ylim=c(0,100), xlab="year", ylab="population size")
colorlist = c("goldenrod3", "darkorange2", "brown3", "darkorchid3", "dodgerblue3", "chartreuse3", "cyan3", "deeppink3")
plot(-100,-100, xlim=c(1980,2020), ylim=c(0,100), xlab="year", ylab="population size")
for(c in 3:ncol(data)){
lines(x=data$YEAR, y=data[,c], col=colorlist[c])
}
plot(-100,-100, xlim=c(1980,2020), ylim=c(0,130), xlab="year", ylab="population size")
for(c in 3:ncol(data)){
lines(x=data$YEAR, y=data[,c], col=colorlist[c])
}
plot(-100,-100, xlim=c(1980,2020), ylim=c(0,130), xlab="year", ylab="population size")
for(c in 3:ncol(data)){
lines(x=data$YEAR, y=data[,c], col=colorlist[c], lwd=1.5)
}
plot(-100,-100, xlim=c(1990,2020), ylim=c(0,130), xlab="year", ylab="population size")
for(c in 3:ncol(data)){
lines(x=data$YEAR, y=data[,c], col=colorlist[c], lwd=1.5)
}
install.packages(c("xcode-select", "--install"))
install.packages("data.table")
d6 = sample(seq(1,6,1), 100, replace=T) + sample(seq(1,6,1), 100, replace=T)
d12 = sample(seq(1,12,1), 100, replace=T)
hist(d6)
hist(d12)
d6 = sample(seq(1,6,1), 1000, replace=T) + sample(seq(1,6,1), 1000, replace=T)
d12 = sample(seq(1,12,1), 1000, replace=T)
hist(d6, xlim(1,12))
?hist
hist(d6, xlim=c(1,12))
hist(d6, xlim=c(1,12), breaks = seq(1,12,1))
hist(d6, xlim=c(1,12), breaks = seq(1,12,1), main="2d6 sum")
mean(d6)
median(d6)
hist(d6, xlim=c(1,12), breaks = seq(1,12,1), main=paste("2d6 sum, mean = ", mean(d6)))
hist(d6, xlim=c(1,12), breaks = seq(1,12,1), main=paste("2d6 sum, mean = ", mean(d6)))
hist(d12, xlim=c(1,12), breaks = seq(1,12,1), main=paste("2d6 sum, mean = ", mean(d12)))
d6 = sample(seq(1,6,1), 1000, replace=T) + sample(seq(1,6,1), 1000, replace=T)
d12 = sample(seq(1,12,1), 1000, replace=T)
hist(d6,  xlim=c(1,12), breaks = seq(1,12,1), main=paste("2d6 sum, mean = ", mean(d6)))
hist(d12, xlim=c(1,12), breaks = seq(1,12,1), main=paste("2d6 sum, mean = ", mean(d12)))
table(d12)
hist(d6,  xlim=c(0,12), breaks = seq(0,13,1), main=paste("2d6 sum, mean = ", mean(d6)))
hist(d12, xlim=c(0,12), breaks = seq(0,13,1), main=paste("2d6 sum, mean = ", mean(d12)))
hist(d6,  xlim=c(0,12), breaks = seq(0,13,1), main=paste("2d6 sum, mean = ", mean(d6)), ylim=c(0,150))
hist(d6,  xlim=c(0,12), breaks = seq(0,13,1), main=paste("2d6 sum, mean = ", mean(d6)), ylim=c(0,250))
hist(d6,  xlim=c(0,12), breaks = seq(0,13,1), main=paste("2d6 sum, mean = ", mean(d6)), ylim=c(0,200))
hist(d12, xlim=c(0,12), breaks = seq(0,13,1), main=paste("2d6 sum, mean = ", mean(d12)), ylim=c(0,200))
hist(d6,  xlim=c(0,12), breaks = seq(0,13,1), main=paste("2d6 sum, mean = ", mean(d6)), ylim=c(0,200))
hist(d12, xlim=c(0,12), breaks = seq(0,13,1), main=paste("1d12 sum, mean = ", mean(d12)), ylim=c(0,200))
d6 = sample(seq(1,6,1), 1000, replace=T) + sample(seq(1,6,1), 1000, replace=T)
d12 = sample(seq(1,12,1), 1000, replace=T)
hist(d6,  xlim=c(0,12), breaks = seq(0,13,1), main=paste("2d6 sum, mean = ", mean(d6)), ylim=c(0,200))
hist(d12, xlim=c(0,12), breaks = seq(0,13,1), main=paste("1d12 sum, mean = ", mean(d12)), ylim=c(0,200))
d = read.table("~/Desktop/Book1.csv", header=T, sep=",")
table(d)
d = read.table("~/Desktop/Book1.csv", header=T, sep=",")
table(d)
169/3
read.table("/Users/jannawilloughby/GDrive/Willoughby lab/mussel genetic diversity/merge/merge_results_all_data.csv", header=T, sep=",")
data = read.table("/Users/jannawilloughby/GDrive/Willoughby lab/mussel genetic diversity/merge/merge_results_all_data.csv", header=T, sep=",")
head(data)
table(data$phylumName, data$className)
table(data$className, data$familyName)
classes = names(data$className)
classes
classes = names(table(data$className))
classes
out = NULL
out = NULL
for(c in 1:length(classes)){
temp = data[data$className==as.character(classes[c]),]
out = c(out, length(names(table(temp$familyName))))
}
cbind(classes, out)
temp
c
length(names(table(temp$familyName)))
table(temp$familyName)
table(temp$familyName)>0
length(names(table(temp$familyName)>0))
table(temp$familyName)[table(temp$familyName)>0)]
tt   = table(temp$familyName)
tt
tt   = tt[tt>0]
tt
length(tt)
out = NULL
for(c in 1:length(classes)){
temp = data[data$className==as.character(classes[c]),]
tt   = table(temp$familyName)
tt   = tt[tt>0]
out  = c(out, length(tt))
}
cbind(classes, out)
c=1
temp = data[data$className==as.character(classes[c]),]
head(temp)
fams = spp = NULL
for(c in 1:length(classes)){
temp = data[data$className==as.character(classes[c]),]
tt   = table(temp$familyName)
tt   = tt[tt>0]
fams = c(fams, length(tt))
spp  = c(spp, nrow(temp))
}
cbind(classes, fams, spp)
data = read.table("/Users/jannawilloughby/GDrive/Willoughby lab/mussel genetic diversity/merge/merge_results_combined.csv", header=T, sep=",")
head(data)
table(data$phylumName, data$className)
classes = names(table(data$className))
fams = spp = NULL
for(c in 1:length(classes)){
temp = data[data$className==as.character(classes[c]),]
tt   = table(temp$familyName)
tt   = tt[tt>0]
fams = c(fams, length(tt))
spp  = c(spp, nrow(temp))
}
cbind(classes, fams, spp)
install.packages("lme4")
####don't do residulas, do random effect for study for the intercept then move on with life (fixed effects for everything else)
library(lme4)
?length
length(data$t, na.rm=T)
setwd("~/Desktop/")
setwd("/Users/jannawilloughby/GDrive/ABMs/migration_ex_7400/")
#set up pop A
popA=matrix(nrow=100, ncol=2) #born, now
popA[,1] = rep("A", 100)
popA[,2] = rep("A", 100)
colnames(popA) = c("born", "now")
popB=matrix(nrow=100, ncol=2) #born, now
popB[,1] = rep("B", 100)
popB[,2] = rep("B", 100)
colnames(popB) = c("born", "now")
migrate = 1
gens    = 50
sample(1:nrow(popA), 1)
sample(1:nrow(popA), 1)
sample(1:nrow(popA), 1)
sample(1:nrow(popA), 1)
sample(1:nrow(popA), 1)
sample(1:nrow(popA), 1)
toA = sample(1:nrow(popA), 1)
toB = sample(1:nrow(popB), 1)
toA
migA = popA[toA, ]
migA
str(migA)
migA
migA[,2] = "B"
migA[1,2] = "B"
migA = popA[toA, , drop=F]
migA[1,2] = "B"
popA = popA[-toA,]
toB = sample(1:nrow(popB), migrate, replace=F)
migB = popB[toB, , drop=F]
migB[1,2] = "A"
popB = popB[-toB,]
setwd("/Users/jannawilloughby/GDrive/ABMs/migration_ex_7400/")
#Simulate movement between two populations that have 100 individuals each.
#Exactly one individual should move from
#pop A to pop B and from pop B to pop A each generation for 50 generations.
#set up pop A and B
popA=matrix(nrow=100, ncol=2) #born, now
popA[,1] = rep("A", 100)
popA[,2] = rep("A", 100)
colnames(popA) = c("born", "now")
popB=matrix(nrow=100, ncol=2) #born, now
popB[,1] = rep("B", 100)
popB[,2] = rep("B", 100)
colnames(popB) = c("born", "now")
migrate = 1
gens    = 50
for(g in 1:gens){
toA = sample(1:nrow(popA), migrate, replace=F)
migA = popA[toA, , drop=F]
migA[1,2] = "B"
popA = popA[-toA,]
toB = sample(1:nrow(popB), migrate, replace=F)
migB = popB[toB, , drop=F]
migB[1,2] = "A"
popB = popB[-toB,]
popA = rbind(popA, migB)
popB = rbind(popB, migA)
}
table(popA[,1], popA[,2])
